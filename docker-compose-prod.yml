version: '3'

services:
    nginx:
        image: "${APP_DOCKER_STACK}-loadbalancer/php:beta-${APP_PHP_VERSION:-8.2}-unit"
        restart: always
        pull_policy: build

        environment:
            AUTORUN_LARAVEL_STORAGE_LINK: false
            AUTORUN_LARAVEL_MIGRATION: true
            SSL_MODE: "off"

        build:
            context: .
            dockerfile_inline: |
                FROM serversideup/php:beta-${APP_PHP_VERSION:-8.2}-unit

                USER root

                RUN install-php-extensions gmp
                RUN install-php-extensions intl

                COPY . /var/www/html

                RUN chown -R www-data:www-data /var/www/html

                USER www-data

                RUN composer install --no-interaction --prefer-dist --no-scripts -o
        
        env_file:
            - docker-compose-prod.env
        depends_on:
            mysql:
                condition: service_healthy
        networks:
            - laravel
            - cloudflared #80

    horizon:
        image: "${APP_DOCKER_STACK}-cli/app:beta-${APP_PHP_VERSION:-8.2}-cli"
        restart: always
        pull_policy: build

        env_file:
            - docker-compose-prod.env

        build:
            context: .
            dockerfile_inline: |
                FROM serversideup/php:beta-${APP_PHP_VERSION:-8.2}-cli

                USER root

                RUN install-php-extensions gmp
                RUN install-php-extensions intl

                COPY . /var/www/html

                RUN chown -R www-data:www-data /var/www/html

                USER www-data

                RUN composer install --no-interaction --prefer-dist --no-scripts -o
        
        command: ["gosu", "www-data", "/usr/local/bin/php", "artisan", "horizon"]
        depends_on:
            mysql:
                condition: service_healthy
        networks:
            - laravel

    scheduler:
        image: "${APP_DOCKER_STACK}-cli/app:beta-${APP_PHP_VERSION:-8.2}-cli"
        restart: always
        pull_policy: build

        env_file:
            - docker-compose-prod.env

        build:
            context: .
            dockerfile_inline: |
                FROM serversideup/php:beta-${APP_PHP_VERSION:-8.2}-cli

                USER root

                RUN install-php-extensions gmp
                RUN install-php-extensions intl

                COPY . /var/www/html

                RUN chown -R www-data:www-data /var/www/html

                USER www-data

                RUN composer install --no-interaction --prefer-dist --no-scripts -o

        command: ["gosu", "www-data", "/usr/local/bin/php", "artisan", "schedule:work"]

        depends_on:
            mysql:
                condition: service_healthy
        networks:
            - laravel

    mysql:
        image: 'mariadb:10'
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD:-secret}'
            MYSQL_ROOT_HOST: "%"
            MYSQL_DATABASE: '${DB_DATABASE:-laravel}'
            MYSQL_USER: '${DB_USERNAME:-laravel}'
            MYSQL_PASSWORD: '${DB_PASSWORD:-secret}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        volumes:
            - 'mysql:/var/lib/mysql'
        networks:
            - laravel
            - cloudflared #3306 TCP !!Use Cloudflare Zero Trust Access Applications for security!!
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
            retries: 3
            timeout: 5s

    redis:
        image: 'redis:alpine'
        restart: always
        volumes:
            - 'redis:/data'
        networks:
            - laravel
            - cloudflared
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            retries: 3
            timeout: 5s

    minio:
        image: 'minio/minio:RELEASE.2020-10-28T08-16-50Z.hotfix.23bfe9811'
        restart: always
        environment:
            MINIO_ROOT_USER: '${MINIO_ROOT_USER:-laravel}'
            MINIO_ROOT_PASSWORD: '${MINIO_ROOT_PASSWORD:-secret}'
        volumes:
            - 'minio:/data/minio'
        networks:
            - laravel
            - cloudflared #9000 && #8900 !!Use Cloudflare Zero Trust Access Applications for security!!
        command: minio server /data/minio --console-address ":8900"
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            retries: 3
            timeout: 5s

    selenium:
        image: 'selenium/standalone-chrome'
        restart: always
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        volumes:
            - '/dev/shm:/dev/shm'
        networks:
            - laravel

    mailpit:
        image: 'axllent/mailpit:latest'
        restart: always
        networks:
            - laravel
            - cloudflared #8025

    soketi:
        image: 'quay.io/soketi/soketi:latest-16-alpine'
        restart: always
        environment:
            SOKETI_DEBUG: '${SOKETI_DEBUG:-0}'
            SOKETI_METRICS_ENABLED: 1
            SOKETI_METRICS_SERVER_PORT: '9601'
        env_file:
            - docker-compose-prod.env
        networks:
            - laravel
            - cloudflared #6001 websocket-option && #9601 !!Use Cloudflare Zero Trust Access Applications for security!!

    meilisearch:
        restart: always
        image: 'getmeili/meilisearch:v1.6.1'
        environment:
            MEILI_MASTER_KEY: '${MEILISEARCH_MASTER_KEY:-masterKey}'
            MEILI_NO_ANALYTICS: '${MEILISEARCH_NO_ANALYTICS:-false}'
        volumes:
            - 'meilisearch:/meili_data'
        networks:
            - laravel
            - cloudflared #7700 !!Use Cloudflare Zero Trust Access Applications for security!!
        healthcheck:
            test: ["CMD", "wget", "--no-verbose", "--spider",  "http://localhost:7700/health"]
            retries: 3
            timeout: 5s

    # [...] https://github.com/laravel/sail/tree/1.x/stubs

    # MOVING FROM UDP TO HTTP ENDPOINT FOR SIMPLICITY AND REACHABILITY THROUGH CLOUDFLARE TUNNELS
    seq:
        image: datalust/seq:latest
        environment:
            ACCEPT_EULA: Y
        restart: always
        volumes:
            - seq-data:/data
        networks:
            - laravel
            - cloudflared #80 !!Use Cloudflare Zero Trust Access Applications for security!!

    ## THIS IS FOR BACKING UP MINIO. DATABASE SHOULD BE BACKED UP BY SPATIE/BACKUP
    backup:
        # Restore backup: https://offen.github.io/docker-volume-backup/how-tos/restore-volumes-from-backup.html
        image: offen/docker-volume-backup:v2
        restart: always
        environment:
            NOTIFICATION_URLS: "${BACKUP_NOTIFICATION_URLS}" # Ex: telegram://token@telegram?chats=@channel-1 // ERROR BACKUP
            BACKUP_RETENTION_DAYS: "${BACKUP_RETENTION_DAYS:-7}"
            BACKUP_COMPRESSION: "gz"
            BACKUP_FROM_SNAPSHOT: "true"
            NOTIFICATION_LEVEL: "${BACKUP_NOTIFICATION_LEVEL:-error}"

            AWS_S3_PATH: "${BACKUP_AWS_S3_PATH}"
            AWS_S3_BUCKET_NAME: "${BACKUP_AWS_S3_BUCKET_NAME}"
            AWS_ACCESS_KEY_ID: "${BACKUP_AWS_ACCESS_KEY_ID}"
            AWS_SECRET_ACCESS_KEY: "${BACKUP_AWS_SECRET_ACCESS_KEY}"
            AWS_STORAGE_CLASS: "${BACKUP_AWS_STORAGE_CLASS}"

            WEBDAV_URL: "${BACKUP_WEBDAV_URL}"
            WEBDAV_PATH: "${BACKUP_WEBDAV_PATH}"
            WEBDAV_USERNAME: "${BACKUP_WEBDAV_USERNAME}"
            WEBDAV_PASSWORD: "${BACKUP_WEBDAV_PASSWORD}"

            SSH_HOST_NAME: "${BACKUP_SSH_HOST_NAME}"
            SSH_PORT: "${BACKUP_SSH_PORT}"
            SSH_REMOTE_PATH: "${BACKUP_SSH_REMOTE_PATH}"
            SSH_USER: "${BACKUP_SSH_USER}"
            SSH_PASSWORD: "${BACKUP_SSH_PASSWORD}"
        volumes:
            - 'minio:/backup/minio:ro'

networks:
    laravel:
    cloudflared:
        external: true

volumes:
    mysql:
    redis:
    minio:
    meilisearch:
    seq-data:
